<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:b="http://blazebit.com/faces"
	template="../templates/ui.xhtml">
	
	<ui:define name="content">

		<h1 class="title ui-widget-header ui-corner-all">PPR - Partial Tree Process</h1>
		<div class="entry">
			<p>You can choose which components to process in JSF lifecycle using the process attribute. This is very useful to do partial validations, model update, invoke application and more.
			This simply makes immediate, subforms and regions obselete. Keywords like @this, @form, @all, @none, @parent makes it even easier to choose what to process.
			just for ajax. Following example demonstrates several combinations.</p>

			<h:form id="form">
				
				<b:panel header="Partial Process">
					
					<h:panelGrid id="grid" columns="2" style="margin-bottom:10px">
						<f:facet name="header">
							<b:messages id="msgs" />
						</f:facet>
					
						<h:outputLabel for="firstname" value="Firstname:" />
						<b:inputText id="firstname" value="#{personBean.firstname}" />
								
						<h:outputLabel for="surname" value="Surname: *" />
						<b:inputText id="surname" value="#{personBean.surname}" required="true" requiredMessage="Surname is required."/>
					</h:panelGrid>
					
				</b:panel>
				
				<h:panelGrid columns="6" cellpadding="5">
					<b:commandButton value="All" id="btnAll" process="@all" update="grid" actionListener="#{personBean.savePerson}"/>
					<b:commandButton value="Form" id="btnForm" process="@form" update="grid" actionListener="#{personBean.savePerson}"/>
					<b:commandButton value="This" id="btnThis" process="@this" update="grid" actionListener="#{personBean.savePerson}"/>
					<b:commandButton value="None" id="btnNone" process="@none" update="grid" actionListener="#{personBean.savePerson}"/>
					<b:commandButton value="Parent" id="btnParent" process="@parent" update="grid" actionListener="#{personBean.savePerson}"/>
					<b:commandButton value="This Surname" id="btnSurname" process="@this,surname" update="grid" actionListener="#{personBean.savePerson}"/>
				</h:panelGrid>

			</h:form>
		
			<h3>Source</h3>
			<b:tabView>
				<b:tab title="pprPartialTree.xhtml">
					<pre name="code" class="xml">
&lt;h:form id="form"&gt;
	
	&lt;b:panel header="Partial Process"&gt;
		
		&lt;h:panelGrid id="grid" columns="2" style="margin-bottom:10px"&gt;
			&lt;f:facet name="header"&gt;
				&lt;b:messages /&gt;
			&lt;/f:facet&gt;
		
			&lt;h:outputLabel for="firstname" value="Firstname:" /&gt;
			&lt;b:inputText id="firstname" 
						value="\#{personBean.firstname}" /&gt;
					
			&lt;h:outputLabel for="surname" value="Surname: *" /&gt;
			&lt;b:inputText id="surname" 
						value="\#{personBean.surname}" required="true" 
						requiredMessage="Surname is required."/&gt;
		&lt;/h:panelGrid&gt;
		
	&lt;/b:panel&gt;
	
	&lt;h:panelGrid columns="6" cellpadding="5"&gt;
		&lt;b:commandButton value="All" id="btnAll" process="@all" update="grid" 
					actionListener="\#{personBean.savePerson}"/&gt;
		&lt;b:commandButton value="Form" id="btnForm" process="@form" update="grid" 
					actionListener="\#{personBean.savePerson}"/&gt;
		&lt;b:commandButton value="This" id="btnThis" process="@this" update="grid" 
					actionListener="\#{personBean.savePerson}"/&gt;
		&lt;b:commandButton value="None" id="btnNone" process="@none" update="grid" 
					actionListener="\#{personBean.savePerson}"/&gt;
		&lt;b:commandButton value="Parent" id="btnParent" process="@parent" update="grid" 
					actionListener="\#{personBean.savePerson}"/&gt;
		&lt;b:commandButton value="This Surname" id="btnSurname" process="@this,surname" update="grid" 
					actionListener="\#{personBean.savePerson}"/&gt;
	&lt;/h:panelGrid&gt;

&lt;/h:form&gt;
					</pre>
				</b:tab>
				
				<b:tab title="PersonBean.java">
							
			<pre name="code" class="java">
package com.blazebit.blazefaces.examples.view;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;

public class PersonBean {

	private String firstname;
	
	private String surname;

	public String getFirstname() {
		return firstname;
	}
	public void setFirstname(String firstname) {
		this.firstname = firstname;
	}

	public String getSurname() {
		return surname;
	}
	public void setSurname(String surname) {
		this.surname = surname;
	}
	
	public void savePerson(ActionEvent actionEvent) {
		FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Welcome " + firstname + " " + surname + "!"));
	}
}
			</pre>
				</b:tab>
			</b:tabView>

		</div>
				
	</ui:define>
</ui:composition>