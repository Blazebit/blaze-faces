<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:b="http://blazebit.com/faces"
                template="../templates/ui.xhtml">

    <ui:define name="content">
        <h1 class="title ui-widget-header ui-corner-all">DataTable - Instant Row Selection</h1>
        <div class="entry">
            <p>Instant row selection, dblclick selection and unselection is implemented using ajax behaviors.</p>

            <h:form id="form">

                <b:growl id="growl" showDetail="true"/>

                <b:dataTable id="cars" var="car" value="#{tableBean.mediumCarsModel}" paginator="true" rows="10"
                             selection="#{tableBean.selectedCar}" selectionMode="single">
                    
                    <b:ajax event="rowSelect" listener="#{tableBean.onRowSelect}" update=":form:display :form:growl" oncomplete="carDialog.show()" />
                    <b:ajax event="rowUnselect" listener="#{tableBean.onRowUnselect}" update=":form:growl"/>
                    
                    <f:facet name="header">
                        Select a row to display a message
                    </f:facet>

                    <b:column headerText="Model">
                        #{car.model}
                    </b:column>

                    <b:column headerText="Year">
                        #{car.year}
                    </b:column>

                    <b:column headerText="Manufacturer" >
                        #{car.manufacturer}
                    </b:column>

                    <b:column headerText="Color">
                        #{car.color}
                    </b:column>
                </b:dataTable>

                <b:dialog id="dialog" header="Car Detail" widgetVar="carDialog" resizable="false"
                          showEffect="explode" hideEffect="explode">

                    <h:panelGrid id="display" columns="2" cellpadding="4">

                        <f:facet name="header">
                            <b:graphicImage value="/images/cars/#{tableBean.selectedCar.manufacturer}.jpg"/>
                        </f:facet>

                        <h:outputText value="Model:" />
                        <h:outputText value="#{tableBean.selectedCar.model}" style="font-weight:bold"/>

                        <h:outputText value="Year:" />
                        <h:outputText value="#{tableBean.selectedCar.year}" style="font-weight:bold"/>

                        <h:outputText value="Manufacturer:" />
                        <h:outputText value="#{tableBean.selectedCar.manufacturer}" style="font-weight:bold"/>

                        <h:outputText value="Color:" />
                        <h:outputText value="#{tableBean.selectedCar.color}" style="font-weight:bold"/>
                    </h:panelGrid>
                </b:dialog>

            </h:form>

            <h3>Source</h3>
            <b:tabView>
                <b:tab title="datatableRowSelectionInstant.xhtml">
                    <pre name="code" class="xml">
&lt;h:form id="form"&gt;

    &lt;b:growl id="growl" showDetail="true"/&gt;

    &lt;b:dataTable id="cars" var="car" value="\#{tableBean.mediumCarsModel}" paginator="true" rows="10"
                 selection="\#{tableBean.selectedCar}" selectionMode="single"&gt;

        &lt;b:ajax event="rowSelect" listener="\#{tableBean.onRowSelect}" 
                    update=":form:display :form:growl" oncomplete="carDialog.show()" /&gt;
        &lt;b:ajax event="rowUnselect" listener="\#{tableBean.onRowUnselect}" update=":form:growl"/&gt;

        &lt;f:facet name="header"&gt;
            Select a row to display a message
        &lt;/f:facet&gt;

        &lt;b:column headerText="Model"&gt;
            \#{car.model}
        &lt;/b:column&gt;

        &lt;b:column headerText="Year"&gt;
            \#{car.year}
        &lt;/b:column&gt;

        &lt;b:column headerText="Manufacturer" &gt;
            \#{car.manufacturer}
        &lt;/b:column&gt;

        &lt;b:column headerText="Color"&gt;
            \#{car.color}
        &lt;/b:column&gt;
    &lt;/b:dataTable&gt;

    &lt;b:dialog id="dialog" header="Car Detail" widgetVar="carDialog" resizable="false"
                showEffect="explode" hideEffect="explode"&gt;

        &lt;h:panelGrid id="display" columns="2" cellpadding="4"&gt;

            &lt;f:facet name="header"&gt;
                &lt;b:graphicImage value="/images/cars/\#{tableBean.selectedCar.manufacturer}.jpg"/&gt;
            &lt;/f:facet&gt;

            &lt;h:outputText value="Model:" /&gt;
            &lt;h:outputText value="\#{tableBean.selectedCar.model}" /&gt;

            &lt;h:outputText value="Year:" /&gt;
            &lt;h:outputText value="\#{tableBean.selectedCar.year}" /&gt;

            &lt;h:outputText value="Manufacturer:" /&gt;
            &lt;h:outputText value="\#{tableBean.selectedCar.manufacturer}" /&gt;

            &lt;h:outputText value="Color:" /&gt;
            &lt;h:outputText value="\#{tableBean.selectedCar.color}" /&gt;
        &lt;/h:panelGrid&gt;
    &lt;/b:dialog&gt;

&lt;/h:form&gt;
                    </pre>
                </b:tab>

                <b:tab title="TableBean.java">
                    <pre name="code" class="java">
package com.blazebit.blazefaces.examples.view;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import com.blazebit.blazefaces.event.SelectEvent;
import com.blazebit.blazefaces.event.UnselectEvent;

import com.blazebit.blazefaces.examples.domain.Car;
import com.blazebit.blazefaces.examples.view.CarDataModel;

public class TableBean {

    static {
		colors = new String[10];
		colors[0] = "Black";
		colors[1] = "White";
		colors[2] = "Green";
		colors[3] = "Red";
		colors[4] = "Blue";
		colors[5] = "Orange";
		colors[6] = "Silver";
		colors[7] = "Yellow";
		colors[8] = "Brown";
		colors[9] = "Maroon";

		manufacturers = new String[10];
		manufacturers[0] = "Mercedes";
		manufacturers[1] = "BMW";
		manufacturers[2] = "Volvo";
		manufacturers[3] = "Audi";
		manufacturers[4] = "Renault";
		manufacturers[5] = "Opel";
		manufacturers[6] = "Volkswagen";
		manufacturers[7] = "Chrysler";
		manufacturers[8] = "Ferrari";
		manufacturers[9] = "Ford";
	}

    private final static String[] colors;

	private final static String[] manufacturers;

	private List&lt;Car&gt; carsSmall;
	
	private Car selectedCar;

    private CarDataModel mediumCarsModel;

	public TableBean() {
		carsSmall = new ArrayList&lt;Car&gt;();
		
		populateRandomCars(carsSmall, 50);

        mediumCarsModel = new CarDataModel(carsSmall);
	}

    private void populateRandomCars(List&lt;Car&gt; list, int size) {
		for(int i = 0 ; i &lt; size ; i++)
			list.add(new Car(getRandomModel(), getRandomYear(), getRandomManufacturer(), getRandomColor()));
	}

	public Car getSelectedCar() {
		return selectedCar;
	}
	public void setSelectedCar(Car selectedCar) {
		this.selectedCar = selectedCar;
	}

    public CarDataModel getMediumCarsModel() {
        return mediumCarsModel;
    }

    public void onRowSelect(SelectEvent event) {
        FacesMessage msg = new FacesMessage("Car Selected", ((Car) event.getObject()).getModel());

        FacesContext.getCurrentInstance().addMessage(null, msg);
    }

    public void onRowUnselect(UnselectEvent event) {
        FacesMessage msg = new FacesMessage("Car Unselected", ((Car) event.getObject()).getModel());

        FacesContext.getCurrentInstance().addMessage(null, msg);
    }
}
                    </pre>
                </b:tab>
                
                <b:tab title="CarDataModel.java">
                    <pre name="code" class="java">
package com.blazebit.blazefaces.examples.view;

import java.util.List;
import javax.faces.model.ListDataModel;
import com.blazebit.blazefaces.examples.domain.Car;
import com.blazebit.blazefaces.model.SelectableDataModel;

public class CarDataModel extends ListDataModel&lt;Car&gt; implements SelectableDataModel&lt;Car&gt; {  

    public CarDataModel() {
    }

    public CarDataModel(List&lt;Car&gt; data) {
        super(data);
    }
    
    @Override
    public Car getRowData(String rowKey) {
        //In a real app, a more efficient way like a query by rowKey should be implemented to deal with huge data
        
        List&lt;Car&gt; cars = (List&lt;Car&gt;) getWrappedData();
        
        for(Car car : cars) {
            if(car.getModel().equals(rowKey))
                return car;
        }
        
        return null;
    }

    @Override
    public Object getRowKey(Car car) {
        return car.getModel();
    }
}
                    </pre>
                </b:tab>
            </b:tabView>

        </div>

    </ui:define>
</ui:composition>
