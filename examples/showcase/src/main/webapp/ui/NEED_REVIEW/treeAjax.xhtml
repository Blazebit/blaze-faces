<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:b="http://blazebit.com/faces"
	template="../templates/ui.xhtml">

	<ui:define name="content">
		<h1 class="title ui-widget-header ui-corner-all">Tree - Ajax</h1>

		<div class="entry">
            <p>Dynamic tree loads nodes on demand with ajax. This is especially useful when dealing with huge trees with many nodes.
            In addition when caching is enabled, expanding a previously loaded node will not result in an ajax request to load it's children again.</p>

			<h:form id="form">

				<b:tree value="#{treeBean.root}" var="node" dynamic="true" cache="true" id="tree">
					<b:treeNode>
						<h:outputText value="#{node}"/>
					</b:treeNode>
				</b:tree>

			</h:form>
			
			<h3>Source</h3>
			<b:tabView>
				<b:tab title="tree.xhtml">
					<pre name="code" class="xml">
&lt;h:form id="form"&gt;

    &lt;b:tree value="#{treeBean.root}" var="node" dynamic="true" cache="true" id="tree"&gt;
        &lt;b:treeNode&gt;
            &lt;h:outputText value="#{node}"/&gt;
        &lt;/b:treeNode&gt;
    &lt;/b:tree&gt;

&lt;/h:form&gt;
					</pre> 
				</b:tab>
				
				<b:tab title="TreeBean.java">
					<pre name="code" class="java">
package com.blazebit.blazefaces.examples.view;

import com.blazebit.blazefaces.model.TreeNode;
import com.blazebit.blazefaces.model.DefaultTreeNode;

public class TreeBean {
	
	private TreeNode root;

	public TreeBean() {
		root = new DefaultTreeNode("Root", null);
		TreeNode node0 = new DefaultTreeNode("Node 0", root);
		TreeNode node1 = new DefaultTreeNode("Node 1", root);
		TreeNode node2 = new DefaultTreeNode("Node 2", root);
		
		TreeNode node00 = new DefaultTreeNode("Node 0.0", node0);
		TreeNode node01 = new DefaultTreeNode("Node 0.1", node0);
		
		TreeNode node10 = new DefaultTreeNode("Node 1.0", node1);
		TreeNode node11 = new DefaultTreeNode("Node 1.1", node1);
		
		TreeNode node000 = new DefaultTreeNode("Node 0.0.0", node00);
		TreeNode node001 = new DefaultTreeNode("Node 0.0.1", node00);
		TreeNode node010 = new DefaultTreeNode("Node 0.1.0", node01);
		
		TreeNode node100 = new DefaultTreeNode("Node 1.0.0", node10);
	}

	public TreeNode getRoot() {
		return root;
	}
}
					</pre>
				</b:tab>
			</b:tabView>
		</div>

	</ui:define>
</ui:composition>